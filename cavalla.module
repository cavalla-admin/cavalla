<?php

/**
 * @file
 * cavalla theme file.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\media\Entity\Media;







/**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function cavalla_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.cavalla':
      $text = file_get_contents(dirname(__FILE__) . "/README.md");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_theme().
 * Lets us define our paragraphs templates in this module.
 */
function cavalla_theme($existing, $type, $theme, $path) {
  return [
    'paragraph__default' => [
      'base hook' => 'paragraph',
    ],
    'field__entity_reference_revisions' => [
      'base hook' => 'field',
    ],
    
  ];
}

function cavalla_preprocess_paragraph(array &$variables) {

  //Returns TRUE if page node is set to Homepage
  $variables['is_home_page'] =  \Drupal::service('path.matcher')->isFrontPage();
  
  $paragraph = $variables['elements']['#paragraph'];
  $variables['id_name'] = $paragraph->bundle() . "__". mt_rand();
}


function cavalla_preprocess_node(array &$variables) {
  //
  $variables['#attached']['library'][] = 'cavalla/global';
}