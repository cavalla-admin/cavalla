<?php

/**
 * @file
 * Cavalla_event module file.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\cavalla\Entity\Cavalla;

/**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function cavalla_event_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.cavalla_event':
      $text = file_get_contents(dirname(__FILE__) . "/README.md");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_theme().
 */
function cavalla_event_theme($existing, $type, $theme, $path) {
  return [
    'node__cavalla_event' => [
      'base hook' => 'node',
    ],

    'node__cavalla_event__teaser' => [
      'base hook' => 'node',
    ],

    'taxonomy_term__cavalla_event' => [
      'base hook' => 'taxonomy_term',
    ],

    'views_view' => [
      'base hook' => 'views_view',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions().
 */
function cavalla_event_theme_suggestions_taxonomy_term(array $variables) {
  $suggestions = [];
  $suggestions[] = 'taxonomy_term__cavalla_event';
  return $suggestions;
}


/**
 * Implements hook_preprocess().
 */
function cavalla_event_preprocess_node__cavalla_event(array &$variables) {

  $node = $variables['elements']['#node'];

  $variables['page_title'] = $node->getTitle();
  $variables['image'] = Cavalla::getInstance()->getMediaUrl($node->field_cavalla_event__image->getValue());

  $date_formatter = \Drupal::service('date.formatter');
  $date = $node->field_cavalla_event__date[0]->date->getTimestamp();
  $end_date = $node->field_cavalla_event__end_date[0]->date->getTimestamp();

  $variables['start_date'] = $date_formatter->format($date, 'custom', 'M d, Y g:i A');
  $variables['end_date'] = ' - ' . $date_formatter->format($end_date, 'custom', 'M d, Y g:i A');

  // Event Tags.
  $variables['event_tags'] = Drupal::service('cavalla_event.events')->getEventTags($node->field_cavalla_event__tags->getValue());

}

/**
 * Implements hook_preprocess().
 */
function cavalla_event_preprocess_taxonomy_term__cavalla_event(array &$variables) {
  $variables['#attached']['library'][] = 'cavalla_theme/cavalla-events';
  $term = $variables['elements']['#taxonomy_term'];
  $cavalla_event =  Drupal::service('cavalla_event.events');

  $variables['page_title'] = $term->get('name')->value;
  $media_object = !empty($term->field_cavalla_event__hero) ? $term->field_cavalla_event__hero->getValue() : '';
  $variables['image'] = Cavalla::getInstance()->getMediaUrl($media_object);

  $variables['current_events'] = $cavalla_event->getEventsByTerm($variables['page_title']);


}



/**
 * Implements hook_preprocess().
 */
function cavalla_event_preprocess_views_view(array &$variables) {
  $variables['theme_hook_suggestion'][] =  'views_view__cavalla_event';

}
